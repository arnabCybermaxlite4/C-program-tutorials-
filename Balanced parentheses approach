#include <stdio.h>
#include <string.h>

#define MAX 100

// Stack implementation
char stack[MAX];
int top = -1;

void push(char c) {
    if (top < MAX - 1) {
        stack[++top] = c;
    }
}

char pop() {
    if (top >= 0) {
        return stack[top--];
    }
    return '\0'; // return null char if empty
}

int isMatching(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

int isBalanced(char *str) {
    for (int i = 0; str[i] != '\0'; i++) {
        char c = str[i];

        if (c == '(' || c == '{' || c == '[') {
            push(c);
        } else if (c == ')' || c == '}' || c == ']') {
            if (top == -1) return 0; // stack empty
            char open = pop();
            if (!isMatching(open, c)) return 0; // mismatch
        }
    }

    return (top == -1); // if stack empty -> balanced
}

int main() {
    char str[MAX];

    printf("Enter an expression: ");
    gets(str);  // for beginners (unsafe but simple)

    if (isBalanced(str))
        printf("Balanced\n");
    else
        printf("Not Balanced\n");

    return 0;
}
